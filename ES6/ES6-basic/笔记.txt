1.重复声明
var a = 10;
var a = 12;

2.常量/变量
let 防止重复声明； 变量
const 防止重复声明； 常量

3.块级作用域
ES5的var的作用域-函数级
ES6的let的作用域-块级

4.代码块
{}
if(){}
for(){}

5.变量总结：
var：重复声明，不能限制修改，函数级
let：不同重复声明-变量，块级
const：不同重复声明-常量，块级

--------------------------------------------

6.解构赋值
json={a;12,b:10};
let{a,b}=json;

arr = [10,4,5];
let [a,b,c] = arr'

解构赋值适合用于从一个大的结构取数据
$.ajax(''xxx) =>{
  code:xx,
  data:xx,
  msg,
  xxx
}

let {code,data} = $.ajax(''xxx);

注意：
1.两边结构必须一样      let {1,b} = [10,12]  错
2.右边必须是合法的值  let {a,b} = {10,18}  错 不知道是数组还是json
3.解决构和赋值必须同时完成

--------------------------------------------
箭头函数：
function(){}

()=>{}

箭头函数简写事项：
1.如果有且仅有一个参数 () 也可以不写
2.如果有且仅有一个语句并且是return,{}也可以不写

修正this（固定this）


-------------------------------------------
...
参数展开：
  --收集剩余参数
  --展开
数组展开
    let arr1 = [12,5,8]; =>  ...arr1 等同于 [12,5,8] 
JOSN展开

-------------------------------------------
Array扩展
map       映射  一一对应     [39,76,34,12,98]  => [及格，及格，不及格，不及格，及格]
reduce    n=>1              如求平均分
filter    过滤
forEach   遍历

模板字符串

--------------------------------------------
json写法、json对象
JSON.stringfy({a:12,b:10})           => '{"a":12,"b"：10}'   将JSON转换为字符串，便于在网络中的传输
JSON.parse('{"a":12,"b"：10}')       => {a:12,b:10}          将字符串转换为JOSN


--------------------------------------------
babel-编译js文件-独立
1.安装node
2.创建package.json
npm init -y
3.安装babe
npm install @babel/core @babel/cli @babel/preset-env -D
npm install @babel/polyfill

4.添加一个脚本-在package.json添加
               源文件夹          目标文件夹 
"build":"babel src        -d    dest
5.添加配置文件 - .babelrc => 声明预设
{
  "presets":[
    "@babel/preset-env"
  ]
}
6.启动运行
npm run build   是不是build取决于脚本文件
真正运行的脚本文件
babel src -d dest

Successfully compiled 1 file with Babel.

运行自动生成dest文件夹,生成1.js文件


babel-编译js文件-和webpack配合 => babel-loader

--------------------------------------------
异步：同时进行多个操作，用户体验好，代码混乱，回调多
同步：一次只能进行一个操作，用户体验不好，同步相对清晰

异步-麻烦
同步-编写容易

融合异步、同步？
Promise
async/await 异步操作同步化核心

异步操作种类：
1.等服务器把数据传过来
2.等一段时间：如定时器
3.等用户输入完
....


将这些异步操作分装成统一的格式，promise不擅长处理异步，更倾向于做封装这个异步操作
举例:最常见的异步操作：ajax
Promise本身不能算对异步操作的处理，只是一个封装 => Promsie给了统一格式

Promise-统一封装
Promsie.all(); - 数组

promise.all();会一股脑读数据，不能解决所有问题
例子：
$.ajax({url:'data/1.txt',dataType:'json'
}).then(arr=>{
    if(true){
      $.ajax({url:'data/1.txt',dataType:'json'})
        .then(arr={
          alert('成功');
        },res={
          alert('失败了');
        })
    }
},res=>{
    alert('失败了');
});

上面并没有太多的简化

-----------------------------------------------------------------------------
使用async/await配合promise简化

async/await：以同步的方式（本质还是异步）写异步代码
generator/yield 已经被async/awit代替

// 声明函数中有异步操作
async function show(){
  xxx,
  xxx,
  // 指明哪些是异步操作，哪些是同步操作=> 主动去给异步操作加上await,用来表明这个操作不能直接就往下运行，需要等待（等待操作结束再往下继续走）
  // awit也会收集数据
  let data = await $.ajax();

}

show();

---------------------------------------------------
普通函数-一直执行到结束才会停止
async函数-能够暂停

使用try{}catch{} 简单捕获异常



-----------------------------------------------------
机器语言 => 汇编语言 => 低级语言(面向过程)=> 高级语言(面向对象) => 模块系统 => 框架 => 系统接口（API）

ES6面向对象

模块系统:
JS模块系统演化历史：
没有模块 => CMD(同步) => AMD(异步) => ES6发布,语言提供模块支持（注意：ES6的模块系统语言支持，但是浏览器不支持=需要编译）
编译：webpack
node - CMD

ES6模块
1.定义？
2.使用
  - 导出（各种格式的数据）
  - 导入
  - webpack编译
安装webpack:
npm install -g webpack
npm install -g webpack-cli
参考：https://www.cnblogs.com/steamed-twisted-roll/p/11299429.html

export 变量、一堆变量、函数、类...

默认成员：
export default

























